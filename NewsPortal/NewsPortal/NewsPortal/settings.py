"""
Django's settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

from celery.schedules import crontab
from django.utils.log import DEFAULT_LOGGING

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_dsgkmi!*+v%2q$o^gz4+kt%#ir6@td2a-^*uaxt*h01x(qw32'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_apscheduler',
]
SITE_ID = 1
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth',
    'allauth.account',
    'allauth.social-account',
    'allauth.social-account.providers.google',
]

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templatetags')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPortal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_CONFIG = {
    'default': {
        'BACKEND': 'django.contrib.auth.backends.ModelBackend',
    },
    'allauth': {
        'BACKEND': 'allauth.account.auth_backends.AuthenticationBackend',
    },
}
AUTHENTICATION_BACKENDS = (
    # ...
    'allauth.account.auth_backends.AuthenticationBackend',
)

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'METHOD': 'oauth2',
        'KEY': 'ваш_client_id',
        'SECRET': 'ваш_client_secret',
        'VERIFIED_EMAIL': True,
        'USE_HTTPS': True,
    }
}

ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180
ACCOUNT_EMAIL_CONFIRMATION_HMAC = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300

LOGIN_URL = '/accounts/login/'
LOGOUT_REDIRECT_URL = '/'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your_email@gmail.com'
EMAIL_HOST_PASSWORD = 'your_password'
DJANGO_APSCHEDULER = {
    'default': {
        'coalesce': False,
        'max_instances': 1,
        'apscheduler.timezone': 'UTC',
    },
}

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
CELERY_BROKER_URL = 'redis-17593.c266.us-east-1-3.ec2.cloud.redislabs.com:17593'
CELERY_RESULT_BACKEND = 'redis-17593.c266.us-east-1-3.ec2.cloud.redislabs.com:17593'

CELERY_BEAT_SCHEDULE = {
    'send_weekly_newsletter': {
        'task': 'yourapp.tasks.send_weekly_newsletter',  # Путь к задаче
        'schedule': crontab(hour=8, minute=0, day_of_week='monday'),  # Еженедельно в понедельник в 8:00 утра
    },
}

LOGGING = DEFAULT_LOGGING.copy()

# Логирование в консоль
LOGGING['handlers']['console'] = {
    'level': 'DEBUG',
    'class': 'logging.StreamHandler',
    'formatter': 'verbose',
}

# Логирование в файл general.log
LOGGING['handlers']['general_file'] = {
    'level': 'INFO',
    'class': 'logging.FileHandler',
    'filename': os.path.join(BASE_DIR, 'general.log'),
    'formatter': 'verbose',
}

# Логирование ошибок в файл errors.log
LOGGING['handlers']['errors_file'] = {
    'level': 'ERROR',
    'class': 'logging.FileHandler',
    'filename': os.path.join(BASE_DIR, 'errors.log'),
    'formatter': 'error_format',
    'filters': ['errors_only'],
}

# Логирование в файл security.log
LOGGING['handlers']['security_file'] = {
    'level': 'INFO',
    'class': 'logging.FileHandler',
    'filename': os.path.join(BASE_DIR, 'security.log'),
    'formatter': 'security_format',
    'filters': ['security_only'],
}

# Отправка почты для ошибок
LOGGING['handlers']['mail_admins'] = {
    'level': 'ERROR',
    'class': 'django.utils.log.AdminEmailHandler',
    'formatter': 'verbose',
    'filters': ['mail_errors_only'],
}

# Фильтры для логирования
LOGGING['filters'] = {
    'errors_only': {
        '()': 'django.utils.log.RequireDebugFalse',
    },
    'mail_errors_only': {
        '()': 'django.utils.log.RequireDebugFalse',
    },
    'security_only': {
        '()': 'django.utils.log.RequireDebugFalse',
        'propagate': False,
    },
}

# Настройки форматирования
LOGGING['formatters']['verbose'] = {
    'format': '[%(asctime)s] %(levelname)s %(message)s',
    'datefmt': '%Y-%m-%d %H:%M:%S',
}

LOGGING['formatters']['error_format'] = {
    'format': '[%(asctime)s] %(levelname)s %(pathname)s: %(message)s\n%(exc_info)s',
    'datefmt': '%Y-%m-%d %H:%M:%S',
}

LOGGING['formatters']['security_format'] = {
    'format': '[%(asctime)s] %(levelname)s %(module)s: %(message)s',
    'datefmt': '%Y-%m-%d %H:%M:%S',
}
